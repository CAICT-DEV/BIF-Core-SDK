/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * © COPYRIGHT 2021 Corporation CAICT All rights reserved.
 * http://www.caict.ac.cn
 */
package cn.bif.sdkSamples.sdk.example;

import cn.bif.api.BIFSDK;
import cn.bif.common.*;
import cn.bif.model.crypto.KeyPairEntity;
import cn.bif.model.request.*;
import cn.bif.model.request.operation.BIFBaseOperation;
import cn.bif.model.request.operation.BIFContractInvokeOperation;
import cn.bif.model.request.operation.BIFGasSendOperation;
import cn.bif.model.response.*;
import cn.bif.model.response.result.BIFTransactionEvaluateFeeResult;
import cn.bif.model.response.result.BIFTransactionGasSendResult;
import cn.bif.module.encryption.key.PrivateKeyManager;
import cn.bif.utils.hex.HexFormat;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

public class TransactionDemo {
    BIFSDK sdk = BIFSDK.getInstance(SampleConstant.SDK_INSTANCE_URL);
    /**
     * getTransactionInfo
     */
    @Test
    public void getTransactionInfo() {
        BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
        request.setHash("d098413c2882ae8cf95e384d778635909effaeb3616ce03d741726b5bc0af00a");
        request.setDomainId(20);

        BIFTransactionGetInfoResponse response = sdk.getBIFTransactionService().getTransactionInfo(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }


    /**
     * gasSend
     */
    @Test
    public void gasSend() {
        // 初始化参数
        String senderAddress = "did:bid:efxASt17p1BeXVZ5vdTW9JkEQjy4vRMG";
        String senderPrivateKey = "priSPKhp98C4bvZkTZpFGF2C3zCFVD3zqKMo7Lc3xoH49Yj47u";
        String destAddress = "did:bid:efqhQu9YWEWpUKQYkAyGevPGtAdD1N6p";
        Long amount = ToBaseUnit.ToUGas("300000");

        BIFTransactionGasSendRequest request = new BIFTransactionGasSendRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setDestAddress(destAddress);
        request.setAmount(amount);
        request.setRemarks("gas send");
       // request.setDomainId(20);
        request.setFeeLimit(125900L);
       // request.setCeilLedgerSeq(1L);
        // 调用 gasSend 接口
        BIFTransactionGasSendResponse response = sdk.getBIFTransactionService().gasSend(request);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }


    /**
     * evaluateFee
     */
    @Test
    public void evaluateFee() {
        // 初始化变量
        String senderAddresss = "did:bid:efHzcjj3w1eg9B4aoaem5axrBLS8y8JF";
        String destAddress = "did:bid:ef14uPsX7XYLzsU4t2rnRrsK2zfUbW3r";
        Long bifAmount = ToBaseUnit.ToUGas("10.9");

        // 构建sendGas操作
        BIFGasSendOperation gasSendOperation = new BIFGasSendOperation();
        gasSendOperation.setSourceAddress(senderAddresss);
        gasSendOperation.setDestAddress(destAddress);
        gasSendOperation.setAmount(bifAmount);

        // 初始化评估交易请求参数
        BIFTransactionEvaluateFeeRequest request = new BIFTransactionEvaluateFeeRequest();
        request.setOperation(gasSendOperation);
        request.setSourceAddress(senderAddresss);
        request.setSignatureNumber(1);
        request.setRemarks(HexFormat.byteToHex("evaluate fees".getBytes()));
        request.setDomainId(20);
        request.setGasPrice(1L);

       // 调用evaluateFee接口
        BIFTransactionEvaluateFeeResponse response = sdk.getBIFTransactionService().evaluateFee(request);
        if (response.getErrorCode() == 0) {
            BIFTransactionEvaluateFeeResult result = response.getResult();
            System.out.println(JsonUtils.toJSONString(result));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    /**
     * batchEvaluateFee
     */
    @Test
    public void batchEvaluateFee() {
        // 初始化参数
        String senderAddress = "did:bid:efHzcjj3w1eg9B4aoaem5axrBLS8y8JF";
        String destAddress1 = KeyPairEntity.getBidAndKeyPairBySM2().getEncAddress();
        String destAddress2 = KeyPairEntity.getBidAndKeyPairBySM2().getEncAddress();
        Long bifAmount = ToBaseUnit.ToUGas("10.9");
        String input1 = "{\"method\":\"creation\",\"params\":{\"document\":{\"@context\": [\"https://w3.org/ns/did/v1\"],\"context\": \"https://w3id.org/did/v1\"," +
                "\"id\": \""+destAddress1+"\", \"version\": \"1\"}}}";
        String input2 = "{\"method\":\"creation\",\"params\":{\"document\":{\"@context\": [\"https://w3.org/ns/did/v1\"],\"context\": \"https://w3id.org/did/v1\"," +
                "\"id\": \""+destAddress2+"\", \"version\": \"1\"}}}";

        List<BIFBaseOperation> operations = new ArrayList<BIFBaseOperation>();
        // 构建操作1
        BIFContractInvokeOperation bIFContractInvokeOperation1 = new BIFContractInvokeOperation();
        bIFContractInvokeOperation1.setContractAddress(destAddress1);
        bIFContractInvokeOperation1.setBIFAmount(bifAmount);
        bIFContractInvokeOperation1.setInput(input1);
        // 构建操作2
        BIFContractInvokeOperation bIFContractInvokeOperation2 = new BIFContractInvokeOperation();
        bIFContractInvokeOperation2.setContractAddress(destAddress2);
        bIFContractInvokeOperation2.setBIFAmount(bifAmount);
        bIFContractInvokeOperation2.setInput(input2);

        operations.add(bIFContractInvokeOperation1);
        operations.add(bIFContractInvokeOperation2);

        // 初始化评估交易请求参数
        BIFTransactionEvaluateFeeRequest request = new BIFTransactionEvaluateFeeRequest();
        request.setOperations(operations);
        request.setSourceAddress(senderAddress);
        request.setSignatureNumber(1);
        request.setRemarks(HexFormat.byteToHex("batch evaluate fees".getBytes()));
        request.setDomainId(0);
        request.setGasPrice(1L);
        request.setFeeLimit(500L);

        // 调用batchEvaluateFee接口
        BIFTransactionEvaluateFeeResponse response = sdk.getBIFTransactionService().batchEvaluateFee(request);
        if (response.getErrorCode() == 0) {
            BIFTransactionEvaluateFeeResult result = response.getResult();
            System.out.println(JsonUtils.toJSONString(result));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    /**
     * bifSubmit
     */
    @Test
    public void bifSubmit() {
        // 初始化参数
        String senderPrivateKey = "priSPKkWVk418PKAS66q4bsiE2c4dKuSSafZvNWyGGp2sJVtXL";
        //序列化交易
        String serialization ="";
        //签名
        byte[] signBytes = PrivateKeyManager.sign(HexFormat.hexToByte(serialization), senderPrivateKey);
        String publicKey = PrivateKeyManager.getEncPublicKey(senderPrivateKey);
        //提交交易
        BIFTransactionSubmitRequest submitRequest = new BIFTransactionSubmitRequest();
        submitRequest.setSerialization(serialization);
        submitRequest.addSignature(publicKey,HexFormat.byteToHex(signBytes));
        //submitRequest.setPublicKey(publicKey);
        //submitRequest.setSignData(HexFormat.byteToHex(signBytes));
        // 调用bifSubmit接口
        BIFTransactionSubmitResponse response = sdk.getBIFTransactionService().BIFSubmit(submitRequest);
        if (response.getErrorCode() == 0) {
            System.out.println(JsonUtils.toJSONString(response.getResult()));
        } else {
            System.out.println("error: " + response.getErrorDesc());
        }
    }
    /**
     * getTxCacheSize
     */
    @Test
    public void getTxCacheSize() {
        BIFTransactionGetTxCacheSizeResponse response = sdk.getBIFTransactionService().getTxCacheSize(1);
        if (response.getErrorCode() == 0) {
            System.out.println("txCacheSize: "+JsonUtils.toJSONString(response.getQueueSize()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }

    @Test
    public void getTxCacheData() {
        BIFTransactionCacheRequest cacheRequest=new BIFTransactionCacheRequest();
        cacheRequest.setDomainId(0);
        //cacheRequest.setHash("");

        BIFTransactionCacheResponse response = sdk.getBIFTransactionService().getTxCacheData(null);
        if (response.getErrorCode() == 0) {
            System.out.println("txCacheData: "+JsonUtils.toJSONString(response.getResult().getTransactions()));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }
    @Test
    public void Offline_ParseBlob() {
        String transactionBlobResult = "";
        // Parsing the transaction Blob
        BIFTransactionParseBlobResponse transaction = sdk.getBIFTransactionService().parseBlob(transactionBlobResult);
        if(transaction.getErrorCode()==0){
            System.out.println("parseBlob: " + JsonUtils.toJSONString(transaction));
        }else {
            System.out.println(JsonUtils.toJSONString(transaction));
        }
    }
    /**
     * 根据hash获取bid标识
     */
    @Test
    public void getBidByHash(){
        BIFTransactionGetInfoRequest request = new BIFTransactionGetInfoRequest();
        request.setHash("d098413c2882ae8cf95e384d778635909effaeb3616ce03d741726b5bc0af00a");
        request.setDomainId(20);
        BIFTransactionGetBidResponse result = sdk.getBIFTransactionService().getBidByHash(request);
        if (result.getErrorCode() == 0) {
            System.out.println("bids: "+JsonUtils.toJSONString(result.getBids()));
        } else {
            System.out.println(JsonUtils.toJSONString(result));
        }
    }

    @Test
    public void batchGasSend() {
        // 初始化参数
        String senderAddress = "did:bid:ef7zyvBtyg22NC4qDHwehMJxeqw6Mmrh";
        String senderPrivateKey = "priSPKr2dgZTCNj1mGkDYyhyZbCQhEzjQm7aEAnfVaqGmXsW2x";
         senderAddress = "did:bid:efDhnL1BDthu7cbxnGMWvvuWPH9UYDfS";
         senderPrivateKey = "priSPKrmtaaVEhG4UuZzVLdDjae6dSVY4mg8pvC1XDt4kfmvvH";
         senderAddress = "did:bid:efnVUgqQFfYeu97ABf6sGm3WFtVXHZB2";
         senderPrivateKey = "priSPKkWVk418PKAS66q4bsiE2c4dKuSSafZvNWyGGp2sJVtXL";
        String destAddress1 = KeyPairEntity.getBidAndKeyPairBySM2().getEncAddress();
        String destAddress2 = KeyPairEntity.getBidAndKeyPairBySM2().getEncAddress();
        Long bifAmount1 = ToBaseUnit.ToUGas("1000");
        Long bifAmount2 = ToBaseUnit.ToUGas("1");

        List<BIFGasSendOperation> operations = new ArrayList<BIFGasSendOperation>();
        BIFGasSendOperation operation1 = new BIFGasSendOperation();
        operation1.setDestAddress("did:bid:efSTLEPkA6jPrnWpaqw4WmAQmaaS7YDu");
        operation1.setAmount(bifAmount1);

        BIFGasSendOperation operation2 = new BIFGasSendOperation();
        operation2.setDestAddress("did:bid:ef2AWam1Z94YrajNw63GLkLoKamGxqx5P");
        operation2.setAmount(bifAmount1);

        BIFGasSendOperation operation3 = new BIFGasSendOperation();
        operation3.setDestAddress("did:bid:efHwQ3m29yGYKZqMJwdJK5xEKvtCw4pv");
        operation3.setAmount(bifAmount1);

        BIFGasSendOperation operation4 = new BIFGasSendOperation();
        operation4.setDestAddress("did:bid:efzguRf84sNRYAn4QuPfcwVzeMb5P7nQ");
        operation4.setAmount(bifAmount1);

        BIFGasSendOperation operation5 = new BIFGasSendOperation();
        operation5.setDestAddress("did:bid:eftSPdAMDXoExnsAXPu9G6KpJLfc74D4");
        operation5.setAmount(bifAmount1);

        BIFGasSendOperation operation6 = new BIFGasSendOperation();
        operation6.setDestAddress("did:bid:efBYuREEjsHHaVQs778NE2YeNDC4Zav3");
        operation6.setAmount(bifAmount1);

        operations.add(operation1);
        operations.add(operation2);
        operations.add(operation3);
        operations.add(operation4);
        operations.add(operation5);
        operations.add(operation6);
        // 初始化请求参数
        BIFBatchGasSendRequest request = new BIFBatchGasSendRequest();
        request.setSenderAddress(senderAddress);
        request.setPrivateKey(senderPrivateKey);
        request.setOperations(operations);
        request.setRemarks(HexFormat.byteToHex("batch gas send".getBytes()));
        request.setGasPrice(10L);
        //request.setFeeLimit(500L);
        // 调用batchGasSend接口
        BIFTransactionGasSendResponse response = sdk.getBIFTransactionService().batchGasSend(request);
        if (response.getErrorCode() == 0) {
            BIFTransactionGasSendResult result = response.getResult();
            System.out.println(JsonUtils.toJSONString(result));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
        List<BIFGasSendOperation> operations1 = new ArrayList<BIFGasSendOperation>();
        BIFGasSendOperation operation = new BIFGasSendOperation();
        operation.setDestAddress("ssssssss");
        operation.setAmount(null);
        operations1.add(operation);
        request.setOperations(operations1);
        // 调用batchGasSend接口
         response = sdk.getBIFTransactionService().batchGasSend(request);
        if (response.getErrorCode() == 0) {
            BIFTransactionGasSendResult result = response.getResult();
            System.out.println(JsonUtils.toJSONString(result));
        } else {
            System.out.println(JsonUtils.toJSONString(response));
        }
    }
}

